'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activate = undefined;

var _vscode = require('vscode');

var _vscode2 = _interopRequireDefault(_vscode);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Generated by CoffeeScript 2.2.2
var activeDocuments, interpSnip, snip;

activeDocuments = new Map();

interpSnip = new _vscode2.default.SnippetString('#{${0:$TM_SELECTED_TEXT}}');

snip = new _vscode2.default.SnippetString('#');

var activate = exports.activate = function activate() {
  return _vscode2.default.commands.registerTextEditorCommand('coffeeSnip.interpolate', function (editor) {
    return new Promise(function (resolve) {
      var cursorOffset, doc, err, match, matcher, templateEnd, templateStart, text;
      try {
        if (!editor) {
          console.log('No Editor?');
          return;
        }
        doc = editor.document;
        cursorOffset = doc.offsetAt(editor.selection.active);
        templateStart = 0;
        templateEnd = 0;
        if (doc.languageId !== 'coffeescript') {
          editor.insertSnippet(snip, editor.selection.active);
          console.log('Not Coffeescript');
          return;
        }
        text = doc.getText();
        matcher = /"[^"]*"/g;
        // match = matcher.exec(text)
        while ((match = matcher.exec(text)) !== null) {
          console.log(match);
          templateStart = match.index;
          templateEnd = matcher.lastIndex;
          if (templateStart < cursorOffset && cursorOffset < templateEnd) {
            // TODO: Take care of output here
            editor.insertSnippet(interpSnip, editor.selection.active);
            return resolve();
          }
        }
        return editor.insertSnippet(snip, editor.selection.active);
      } catch (error) {
        err = error;
        return _vscode2.default.window.showErrorMessage(err != null ? err.stack : void 0);
      }
    });
  });
};
//# sourceMappingURL=extension.js.map
